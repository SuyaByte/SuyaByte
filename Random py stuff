Value operator value makes up an expression which evaluates to a single value. For eg. 10 + 0.0 >>> 10.0
10, 0.0, 10.0 are values, + is an operator, 10 + 0.0 is an expression
Addition operator can also work as string concatenation operator : 'Suyah' + 'Byte' >>> 'SuyahByte'; can be used on 2 strings
Multiplication operator can also work as string replication operator : 'Suyah' * 2 >>> 'SuyahSuyah'; can be used only on a string and an integer combination else throws error
Initialize a value to a variable ; Just call the variable name to get its value 
>>> eggs = 2 //not just int, str can also be assigned
>>> eggs 
>>> 2
str can be assigned to int without any type conversion
>>> chicken = 2
>>> chicken
>>> 2
>>> chicken = 'eggs mom'
>>> chicken
>>> 'eggs mom' //old value 2 is forgotten
# is used for comments in python
Using print() with nothing in between the parantheses will output a blank line on the screen
print() function can print str or int values. 
But print('Hi' + 9 + 'Bye') will throw an error as the expression Hi' + 9 + 'Bye' causes error here. Because in this case + is being used for concatenation and an integer can't be concatenated to a string.
The input given by the user is always a str so convert it to int using int() before using it in any mathematical expressions.
str can be converted to int, float can be converted to int but a floating number stored as a string cannot be converted to int
>>> int('99') >>> 99
>>> int(99.9) >>> 99
>>> int('99.9') >>> error
integers and floating point numbers are equal but not strings
>>> '99' == '99' >>> false
>>> 99 == 099.00 >>> true9
While assigning boolean values to a variable, no need to use quotes like we use for a string. Directly assign True or False
>>> spam = True
>>> spam
>>> True
>>> spam = true //error
== and != will work while comparing values of any datatype
<, >, <=, >= will work only for integer and floating point numbers.
Order of operations -> math operators > comparision operators > not operator > and operator > not operator
break and continue statements can be used to manipulate while loops
If you want to include both the variables used in the program and some normal statements in the print() function, convert the variables to str()
random.randint(1,500)//prints random integers from 1 to 500
if we use "from random import *" instead of "import random" no need to explicitly mention module name before calling the function. So just use randint(1,100) directly
print(r'\n')->prints \n instead of new line. This is used to print raw string.
>>> x = 2
>>> x + 6
>>> 8
if we want to use this output in next operation just use _
>>> _ + 9
>>> 17 (8+9)
[]->list, ()->tuple
Use id(variableName) to get its address.
>>> a = 10 >>> a >>> 10 >>> id(a) >>> 180560230 (some address) 
>>> b = a >>> b >>> 10 >>> id(b) >>> 180560230 (same address as a). They both point to the same address which is having the value 10.
>>> PI = 3.14 #using capital letters to define a variable means indicating that it is a constant value.
>>> type(PI) >>> <class 'float'> #to get the datatype
>>> egg = None #defining egg as None datatype
>>> num = 1+2j #j is imaginary number so on whole num becomes complex datatype
>>> a = 1 >>> b = 2 >>> c = complex(a) >>> c >>> 1+0j #passing only one value to c while converting it to a complex number.
>>> c = complex(a,b) >>> c >>> 1+2j #passing 2 values, we can also pass numbers directly.
>>> r = range(1,10) #defining datatype range from 1 to 9, so 10 won't be included.
>>> list(r) # to get the values in the range r
>>> [1,2,3,4,5,6,7,8,9] #10 is not included
Dictionary, key will have a value, keys are unique, values are not. So a set can be used to define it
>>> s = {'a':'123','b':'124'} >>> s >>> {'a':'123','b':'124'}
Let's say we use 'a', 'b' as a, b and we have already defined them earlier. Then we'll get the values of a, b instead of the letters.
>>> a = 99 >>> b = 88 >>> s = {a:'321',b:'421'} >>> s >>> {99:'321',88:'421'}
>>> s.keys() >>> dict_keys(['a','b']) in first example, >>> dict_keys([99, 88]) in second example
>>> s.get('a') >>> '123' >>> s.get(a) >>> '321'
>>> x = 2 >>> x+=2 >>> x >>> 4 #inrementing x by 2
>>> a,b = 5,6 >>> a >>> 5 >>> b >>>6 #we can assign multiple variables at once
n=-n will assign a negative value to n. this is the unary operator -
bin(25)->to get binary number of it >>> '0b11001' #0b indicates that it's a binary number
similarly oct(25) >>> '0o31'
hex(25) >>> '0x19'
#we can enter the binary/octal/hexadecimal values diectly in the console to get the actual decimal numbers. >>> 0o31 >>> 25
swapping 2 numbers without using a temp
>>> a = 3
>>> b = 4
>>> a = a+b (7)
>>> b = a-b (7-4=3)
>>> a = a-b (7-3=4 now a is 4 b is 3 values are swapped)
or we can use xor
>>> a = a^b
>>> b = a^b
>>> a = a^b
xor is useful instead of above methos as it uses constant bits. In addition above, large values will need more bits -> memory wastage
a,b=b,a
import math
>>> x = math.floor(2.9) >>> x >>> 2
>>> y = math.ceil(3.1) >>> y >>> 4
>>> math.pi >>> 3.141592653589793
>>> math.e >>> 2.718281828459045
>>> import math as m #now you can just use m.funstionName instead of math.functionName
from math import sqrt, pow #to import only these functions, just use functions directly in this case
just click on the line number in pycharm to get break point
after selecting break point go to run and click on debug, it starts execution
press F8 to get the error
input("Matter") is used to get the input value, but input() gives a string so we need to convert it to integers in case of numbers.
>>> ch = input("enter a character")[0] #this will print only 1 character from the input string
>>> print(ch) >>> absggfhgf >>> a
>>> ch = eval(input("enter a character:")) #we can enter a mathematical expr as iput which will be evaluated
>>> print(ch) >>> Enter a character:2+6+3 >>> 11
import sys
>>> a = int(sys.argv[1])
>>> b = int(sys.argv[2])
>>> c = a + b >>> print(c) 
Using above we can directly pass values to command prompt while running the file in it.
"Syntax in cmd-> Python Filename 28 87" #here argv[0] is for filename, argv[1] will fetch 28, argv[2] fetches 84 and gives output as 112
>>> print("hello,end="") #this will not create new line for next print statement but concatenate it.
>>> print() #for new line

